@model ProductDetailsModel
@using Microsoft.AspNetCore.Http.Extensions
@using Nop.Core.Domain.Seo;
@inject Nop.Core.IWebHelper webHelper
@inject SeoSettings seoSettings
@{
    Layout = "_ColumnsOnes";

    //title
    Html.AddTitleParts(!string.IsNullOrEmpty(Model.MetaTitle) ? Model.MetaTitle : Model.Name);
    //meta
    Html.AddMetaDescriptionParts(Model.MetaDescription);
    Html.AddMetaKeywordParts(Model.MetaKeywords);
    //page class
    Html.AppendPageCssClassParts("html-product-details-page");
    Html.AppendScriptParts(ResourceLocation.Footer, "~/js/lightslider.js");
    Html.AppendScriptParts(ResourceLocation.Footer, "~/lib/lightbox/dist/js/lightbox-plus-jquery.min.js");




    //canonical URL
    if (seoSettings.CanonicalUrlsEnabled)
    {
        var productUrl = Url.RouteUrl("Product", new { SeName = Model.SeName }, webHelper.CurrentRequestProtocol).ToLowerInvariant();
        Html.AddCanonicalUrlParts(productUrl, seoSettings.QueryStringInCanonicalUrlsEnabled);
    }

    //open graph META tags
    if (seoSettings.OpenGraphMetaTags)
    {
        Html.AddHeadCustomParts("<meta property=\"og:type\" content=\"product\" />");
        Html.AddHeadCustomParts("<meta property=\"og:title\" content=\"" + Html.Encode(Model.Name) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"og:description\" content=\"" + Html.Encode(Nop.Core.Html.HtmlHelper.StripTags(Model.MetaDescription)) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"og:image\" content=\"" + Model.DefaultPictureModel.ImageUrl + "\" />");
        Html.AddHeadCustomParts("<meta property=\"og:url\" content=\"" + webHelper.GetThisPageUrl(true) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"og:site_name\" content=\"" + Html.Encode(Model.CurrentStoreName) + "\" />");
    }

    //Twitter META tags
    if (seoSettings.TwitterMetaTags)
    {
        Html.AddHeadCustomParts("<meta property=\"twitter:card\" content=\"summary\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:site\" content=\"" + Html.Encode(Model.CurrentStoreName) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:title\" content=\"" + Html.Encode(Model.Name) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:description\" content=\"" + Html.Encode(Nop.Core.Html.HtmlHelper.StripTags(Model.MetaDescription)) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:image\" content=\"" + Model.DefaultPictureModel.ImageUrl + "\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:url\" content=\"" + webHelper.GetThisPageUrl(true) + "\" />");
    }
}

<!--product breadcrumb-->
@section Breadcrumb
    {
    @await Html.PartialAsync("_ProductBreadcrumb", Model.Breadcrumb)
}
@await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsAfterBreadcrumb, additionalData = Model })
@await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsTop, additionalData = Model })
<form asp-route="Product" asp-route-sename="@Model.SeName" method="post" id="product-details-form">
    <div class="col-md-12 col-sm-8 col-xs-12 main-content">
        <div class="main-content-shop">
            <div class="main-detail">
                <div class="row">
                    <div itemscope itemtype="http://schema.org/Product" data-productid="@Model.Id">
                        <div class="product-essential">
                            <div class="col-md-5 col-sm-12 col-xs-12">
                                <div class="slider">
                                    <div class="item">
                                        <div class="clearfix">
                                            @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsBeforePictures, additionalData = Model })
                                            <!--product pictures-->
                                            @await Html.PartialAsync("_ProductDetailsPictures", Model)
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-7 col-sm-12 col-xs-12">
                                <div class="detail-info">
                                    @await Html.PartialAsync("_Discontinued", Model)
                                    <h3 class="title-detail" itemprop="name">@Model.Name</h3>

                                    @await Html.PartialAsync("_ProductReviewOverview", Model.ProductReviewOverview)
                                    @if (!string.IsNullOrEmpty(Model.ShortDescription))
                                    {
                                        <div class="short-description">
                                            @Html.Raw(Model.ShortDescription)
                                        </div>
                                    }
                                    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsOverviewTop, additionalData = Model })
                                    @await Html.PartialAsync("_SKU_Man_GTIN_Ven", Model)
                                    <!--manufacturers-->
                                    @await Html.PartialAsync("_ProductManufacturers", Model.ProductManufacturers)
                                    <!--availability-->
                                    @await Html.PartialAsync("_Availability", Model)

                                    <!--delivery-->
                                    @await Html.PartialAsync("_DeliveryInfo", Model)
                                    <!--sample download-->
                                    @await Html.PartialAsync("_DownloadSample", Model)
                                    <!--attributes-->
                                    <!--gift card-->
                                    @{
                                        var dataDictGiftCard = new ViewDataDictionary(ViewData);
                                        dataDictGiftCard.TemplateInfo.HtmlFieldPrefix = $"giftcard_{Model.Id}";
                                        @await Html.PartialAsync("_GiftCardInfo", Model.GiftCard, dataDictGiftCard)
                                    }
                                    <!--rental info-->
                                    @{
                                        var dataDictRental = new ViewDataDictionary(ViewData);
                                        dataDictRental.TemplateInfo.HtmlFieldPrefix = $"rental_{Model.Id}";
                                        @await Html.PartialAsync("_RentalInfo", Model, dataDictRental)
                                    }
                                    <!--price & add to cart-->

                                    @{
                                        var dataDictPrice = new ViewDataDictionary(ViewData);
                                        dataDictPrice.TemplateInfo.HtmlFieldPrefix = $"price_{Model.Id}";

                                        @await Html.PartialAsync("_ProductPrice", Model.ProductPrice, dataDictPrice)

                                        @await Html.PartialAsync("_ProductTierPrices", Model.TierPrices)


                                    }
                                    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsInsideOverviewButtonsAfter, additionalData = Model })
                                    <!--wishlist, compare, email a friend-->
                                    <div class="attr-info">
                                        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsInsideOverviewButtonsBefore, additionalData = Model })
                                        @{
                                            var dataDictAddToCart = new ViewDataDictionary(ViewData);
                                            dataDictAddToCart.TemplateInfo.HtmlFieldPrefix = $"addtocart_{Model.Id}";
                                            @await Html.PartialAsync("_AddToCart", Model.AddToCart, dataDictAddToCart)

                                        }

                                        <div class="product-social-extra">
                                            @{
                                                var dataDictAddToWishlist = new ViewDataDictionary(ViewData);
                                                dataDictAddToWishlist.TemplateInfo.HtmlFieldPrefix = $"addtocart_{Model.Id}";
                                                @await Html.PartialAsync("_AddToWishlist", Model.AddToCart, dataDictAddToWishlist)
                                                @await Html.PartialAsync("_CompareProductsButton", Model)
                                                @await Html.PartialAsync("_ProductEmailAFriendButton", Model)
                                            }

                                        </div>
                                    </div>
                                    @{
                                        var dataDictAttributes = new ViewDataDictionary(ViewData);
                                        dataDictAttributes.TemplateInfo.HtmlFieldPrefix = $"attributes_{Model.Id}";
                                        @await Html.PartialAsync("_ProductAttributes", Model.ProductAttributes, dataDictAttributes)
                                    }

                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="tab-detail">
                <div class="title-tab-detail">
                    <ul role="tablist">
                        <li class="active"><a href="#tab1" data-toggle="tab">Ürün Özellikleri </a></li>
                        <li><a href="#tab2" data-toggle="tab">Taksit Seçenekleri</a></li>
                        <li><a href="#tab3" data-toggle="tab">Yorumlar</a></li>
                        <li><a href="#tab4" data-toggle="tab">Tavsiye Et </a></li>
                        <li><a href="#tab5" data-toggle="tab">Resimler</a></li>
                    </ul>
                </div>
                <div class="content-tab-detail">
                    <div class="tab-content">
                        <div role="tabpanel" class="tab-pane active" id="tab1">
                            <div class="inner-content-tab-detail">
                                @if (!string.IsNullOrEmpty(Model.FullDescription))
                                {
                                    <div class="full-description" itemprop="description">
                                        @Html.Raw(Model.FullDescription)
                                    </div>
                                }
                                @await Html.PartialAsync("_ProductSpecifications", Model.ProductSpecifications)
                                @await Html.PartialAsync("_ProductTags", Model.ProductTags)
                            </div>
                        </div>
                        <div role="tabpanel" class="tab-pane" id="tab2">
                            <div class="inner-content-tab-detail">
                                @await Component.InvokeAsync("TopicBlock", new { systemName = "TaksitSecenekleri" })
                                @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsOverviewBottom, additionalData = Model })
                            </div>
                        </div>
                        <div role="tabpanel" class="tab-pane" id="tab3">
                            <div class="inner-content-tab-detail">
                                <!--product reviews-->
                                @await Html.PartialAsync("_ProductReviewOverview", Model.ProductReviewOverview)
                            </div>
                        </div>
                        <div role="tabpanel" class="tab-pane" id="tab4">
                            <div class="inner-content-tab-detail">
                                @await Html.PartialAsync("_ShareButton", Model)
                            </div>
                        </div>
                        <div role="tabpanel" class="tab-pane" id="tab5">
                            <div class="inner-content-tab-detail">
                                <div class="box-adv10 box-adv-col2">
                                    <div class="row">
                                        @foreach (var item in Model.PictureModels)
                                        {

                                            <div class="col-md-2 col-sm-2 col-xs-12">
                                                <div class="item-adv-simple">
                                                    <a href="#"><img src="@item.ImageUrl" alt="@item.Title"></a>
                                                </div>
                                            </div>

                                        }
                                        <div class="col-md-2 col-sm-2 col-xs-12 picture">
                                            <div class="picture-thumbs item-adv-simple"></div>
                                        </div>
                                        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsAfterPictures, additionalData = Model })
                                    </div>
                                </div>
                                @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsBeforeCollateral, additionalData = Model })
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            @await Component.InvokeAsync("ProductsAlsoPurchased", new { productId = Model.Id })


            @await Component.InvokeAsync("RelatedProducts", new { productId = Model.Id })

        </div>
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsBottom, additionalData = Model })
    </div>

</form>



