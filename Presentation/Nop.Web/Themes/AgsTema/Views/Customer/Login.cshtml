@model LoginModel
@using Nop.Core
@inject IWebHelper webHelper
@{
    Layout = "_ColumnsOnes";

    //title
    Html.AddTitleParts(T("PageTitle.Login").Text);
    //page class
    Html.AppendPageCssClassParts("html-login-page");

    //register URL with return URL (if specified)
    var registerUrl = Url.RouteUrl("Register", null, webHelper.CurrentRequestProtocol);
    if (!string.IsNullOrEmpty(this.Context.Request.Query["returnUrl"]))
    {
        registerUrl = webHelper.ModifyQueryString(registerUrl, "returnurl", this.Context.Request.Query["returnUrl"]);
    }
}
@if (!Model.CheckoutAsGuest)
{
    <div class="col-md-6 col-sm-6 col-xs-12 col-md-offset-3">
        <div class="account-login">
            <form asp-route="Login" asp-route-returnurl="@Context.Request.Query["ReturnUrl"]" method="post" class="form-my-account">
                <h2 class="title"><i class="fa fa-user"></i>  @T("Account.Login.Welcome")</h2>
                @if (Model.UsernamesEnabled)
                {
                    <p>
                        <input asp-for="Username" class="username" autofocus="autofocus" type="text" placeholder="Kullanıcı Adı Giriniz" />
                        <span asp-validation-for="Username"></span><span class="icon-mail"></span>
                    </p>
                }
                else
                {
                    <p>
                        <input asp-for="Email" class="email" autofocus="autofocus" type="text" placeholder="mail adresi giriniz" />
                        <span asp-validation-for="Email"></span><span class="icon-mail"></span>
                    </p>
                }
                <p>
                    <input asp-for="Password" class="password" placeholder="şifrenizi Giriniz" />
                    <span asp-validation-for="Password"></span><span class="icon-password"></span>
                </p>
                <p>
                    <input asp-for="RememberMe" />
                    <label asp-for="RememberMe"></label>
                    <span class="forgot-password">
                        <a asp-route="PasswordRecovery">@T("Account.Login.ForgotPassword")</a>
                    </span>
                </p>
                <div class="buttons">
                    <input class="button-1 login-button" type="submit" value="@T("Account.Login.LoginButton")" />
                </div>
                @if (Model.DisplayCaptcha)
                {
                    <div class="captcha-box">
                        <nop-captcha />
                    </div>
                }
            </form>
            @await Component.InvokeAsync("TopicBlock", new { systemName = "LoginRegistrationInfo" })
            <div class="col-md-6 col-sm-6 col-xs-12 col-md-offset-3">
                @await Component.InvokeAsync("ExternalMethods", "ExternalAuthentication")
            </div>

        </div>
    </div>

}
else
{
    <div class="row">
        <div class="col-md-6 col-sm-6 col-ms-12">
            <div style="background: #fff; padding: 30px; box-shadow: 0 1px 2px rgba(0, 0, 0, 0.2);">
                <div class="account-login">
                    <h4>@T("Account.Login.CheckoutAsGuestOrRegister")</h4>
                    <p> @await Component.InvokeAsync("TopicBlock", new { systemName = "CheckoutAsGuestOrRegister" })</p>

                    <p>
                        <div class="buttons">
                            <input type="button" class="button-1 checkout-as-guest-button" onclick="location.href = '@Url.RouteUrl("Checkout")'" value="@T("Account.Login.CheckoutAsGuest")" />
                            <input type="button" class="button-1 register-button" onclick="location.href = '@registerUrl'" value="@T("Account.Register")" />
                        </div>

                    </p>
                    <div class="col-md-6 col-sm-6 col-xs-12 col-md-offset-3">
                       @await Component.InvokeAsync("ExternalMethods", "ExternalAuthentication")
                       
                    </div>
                </div>
            </div>
        </div>

        <div class="col-md-6 col-sm-6 col-ms-12">
            <div class="account-register">
                <form asp-route="Login" asp-route-returnurl="@Context.Request.Query["ReturnUrl"]" method="post" class="form-my-account">
                    <h2 class="title">@T("Account.Login.Fast.Welcome")</h2>
                    <p>@T("Account.Login.Fast.Message") </p>
                    @if (Model.UsernamesEnabled)
                    {
                        <p>
                            <input asp-for="Username" class="username" autofocus="autofocus" type="text" />
                            <span asp-validation-for="Username"></span><span class="icon-mail"></span>
                        </p>
                    }
                    else
                    {
                        <p>
                            <input asp-for="Email" class="email" autofocus="autofocus" type="text" />
                            <span asp-validation-for="Email"></span><span class="icon-mail"></span>
                        </p>
                    }
                    <p>
                        <input asp-for="Password" class="password" />
                        <span asp-validation-for="Password"></span><span class="icon-password"></span>
                    </p>
                    <p>
                        <input asp-for="RememberMe" />
                        <label asp-for="RememberMe"></label>
                        <span class="forgot-password">
                            <a asp-route="PasswordRecovery">@T("Account.Login.ForgotPassword")</a>
                        </span>
                    </p>
                    <div class="buttons">
                        <input class="button-1 login-button" type="submit" value="@T("Account.Login.LoginButton")" />
                    </div>
                    @if (Model.DisplayCaptcha)
                    {
                        <div class="captcha-box">
                            <nop-captcha />
                        </div>

                    }
                </form>
            </div>
            @await Component.InvokeAsync("TopicBlock", new { systemName = "LoginRegistrationInfo" })


        </div>
    </div>
}

@await Html.PartialAsync("_ExternalAuthentication.Errors")





