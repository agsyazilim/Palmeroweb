@model CatalogPagingFilteringModel
<div class="list-shop-filter">

    @*sorting*@
    @if (Model.AllowProductSorting)
    {
        <div class="product-order">
            <span>@T("Catalog.OrderBy")</span>
            @Html.DropDownList("products-orderby", Model.AvailableSortOptions, new { onchange = "setLocation(this.value);", aria_label = T("Catalog.OrderBy.Label") })
        </div>
    }
    @*page size*@
    @if (Model.AllowCustomersToSelectPageSize)
    {
        <div class="product-page-size">
            <span>@T("Catalog.PageSize")</span>
            @Html.DropDownList("products-pagesize", Model.PageSizeOptions, new { onchange = "setLocation(this.value);", aria_label = T("Catalog.PageSize.Label") })
            <span>@T("Catalog.PageSize.PerPage")</span>
        </div>
    }


    @*view mode*@
    @if (Model.AllowProductViewModeChanging)
    {
        <div class="product-viewmode">
            <ul class="shop-tab-select">
                <span>@T("Catalog.ViewMode")</span>
                @if (Model.AvailableViewModes.Count > 1)
                {
                    var gridMode = Model.AvailableViewModes[0];
                    var listMode = Model.AvailableViewModes[1];
                    <li class="@if (gridMode.Selected)
                                             {<text>active</text>}">
                        <a class="grid-tab grid" href="@gridMode.Value" title="@gridMode.Text">@gridMode.Text</a>

                    </li>
                    <li @if (listMode.Selected) { <text> class="active" </text> }>
                        <a class="list-tab list" href="@listMode.Value" title="@listMode.Text">@listMode.Text</a>
                    </li>

                }
            </ul>
        </div>

    }

</div>