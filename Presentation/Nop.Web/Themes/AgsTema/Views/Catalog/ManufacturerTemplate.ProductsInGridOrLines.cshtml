@model ManufacturerModel
@using Nop.Core.Domain.Seo
@inject Nop.Core.IWebHelper webHelper
@inject SeoSettings seoSettings
@{
    Layout = "_ColumnsTwo";

    //title
    Html.AddTitleParts(!string.IsNullOrEmpty(Model.MetaTitle) ? Model.MetaTitle : Model.Name);
    //meta
    Html.AddMetaDescriptionParts(Model.MetaDescription);
    Html.AddMetaKeywordParts(Model.MetaKeywords);
    //page class
    Html.AppendPageCssClassParts("html-manufacturer-page");

    if (seoSettings.CanonicalUrlsEnabled)
    {
        var manufacturerUrl = Url.RouteUrl("Manufacturer", new { SeName = Model.SeName }, webHelper.CurrentRequestProtocol).ToLowerInvariant();
        Html.AddCanonicalUrlParts(manufacturerUrl, seoSettings.QueryStringInCanonicalUrlsEnabled);
    }
}

@section Breadcrumb
    {
    <ol class="breadcrumb no-hide">
        <li>
            <a href="@Url.RouteUrl("HomePage")" title="@T("Categories.Breadcrumb.Top")">@T("Categories.Breadcrumb.Top")</a>
            @*<span class="delimiter">@breadcrumbDelimiter</span>*@
        </li>
        <li>
            <a href="#" title="@Model.Name">@Model.Name</a>

        </li>

    </ol>

}
@await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.CategoryPageSlider, additionalData = Model })
<div class="page manufacturer-page">

    <div class="page-body">
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ManufacturerDetailsTop, additionalData = Model })
        @*description*@
        @if (!string.IsNullOrWhiteSpace(Model.Description))
        {
            <div class="manufacturer-description">
                @Html.Raw(Model.Description)
            </div>
        }
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ManufacturerDetailsBeforeFeaturedProducts, additionalData = Model })
        @*featured products*@
        @if (Model.FeaturedProducts.Count > 0)
        {
            <div class="bg-color-white mb-20">
                <div class="row">
                    <div class="product-grid featured-product-grid">
                        <div class="title">
                            <strong>@T("Products.FeaturedProducts")</strong>
                        </div>
                        <div class="item-grid">
                            @foreach (var item in Model.FeaturedProducts)
                            {
                                <div class="col-md-4 col-sm-4 col-xs-12">
                                    <div class="mobile-access-box mobile-access-long ">
                                        <div class="inner-item-paginav-featured">
                                            <div class="item-box">
                                                @await Html.PartialAsync("_ProductBox", item)
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>

            </div>
        }
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ManufacturerDetailsAfterFeaturedProducts, additionalData = Model })
        @if (Model.Products.Count > 0)
        {
            @await Html.PartialAsync("_CatalogSelectors", Model.PagingFilteringContext)
        }
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ManufacturerDetailsBeforeFilters, additionalData = Model })
        @*filtering*@
        @if (Model.PagingFilteringContext.PriceRangeFilter.Enabled)
        {
            @await Html.PartialAsync("_FilterPriceBox", Model.PagingFilteringContext.PriceRangeFilter)
        }
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ManufacturerDetailsBeforeProductList, additionalData = Model })

        @if (Model.Products.Count > 0)
        {
            <div class="shop-tab-title">@Model.Name</div>
            <div class="bg-color-white mb-20">
                <div class="row">
                    @foreach (var product in Model.Products)
                    {
                        <div class="@(Model.PagingFilteringContext.ViewMode == "list" ? "col-md-3 col-sm-3 col-xs-12" : "col-md-4 col-sm-4 col-xs-12")">
                            <div class="mobile-access-box mobile-access-long ">
                                <div class="inner-item-paginav-featured">
                                    @await Html.PartialAsync("_ProductBoxCategory", product)
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        }
        @{
            var pager = Html.Pager(Model.PagingFilteringContext).QueryParam("pagenumber");
        }
        @if (!pager.IsEmpty())
        {
            <div class="pager">
                @pager
            </div>
        }
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ManufacturerDetailsBottom, additionalData = Model })
    </div>
</div>
