@model ProductsByTagModel
@using Nop.Core.Domain.Seo
@inject Nop.Core.IWebHelper webHelper
@inject SeoSettings seoSettings
@{
    Layout = "_ColumnsTwo";

    //title
    Html.AddTitleParts(string.Format(T("PageTitle.ProductsByTag").Text, Model.TagName));
    //page class
    Html.AppendPageCssClassParts("html-product-tag-page");

    //canonical URL
    if (seoSettings.CanonicalUrlsEnabled)
    {
        var productsByTagUrl = Url.RouteUrl("ProductsByTag", new { SeName = Model.TagSeName }, webHelper.CurrentRequestProtocol).ToLowerInvariant();
        Html.AddCanonicalUrlParts(productsByTagUrl, seoSettings.QueryStringInCanonicalUrlsEnabled);
    }
}

@section Breadcrumb
    {
    <ol class="breadcrumb no-hide">
        <li>
            <a href="@Url.RouteUrl("HomePage")" title="@T("Categories.Breadcrumb.Top")">@T("Categories.Breadcrumb.Top")</a>
            @*<span class="delimiter">@breadcrumbDelimiter</span>*@
        </li>
        <li>
            <a href="#" title="@Model.TagName">@Model.TagName</a>

        </li>

    </ol>

}@await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.CategoryPageSlider, additionalData = Model })
<div class="page product-tag-page">
    <div class="page-title">
        <h1>@string.Format(T("Products.Tags.ProductsTaggedWith").Text, Model.TagName)</h1>
    </div>
    <div class="page-body">
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductsByTagTop, additionalData = Model })
        @if (Model.Products.Count > 0)
        {
            @await Html.PartialAsync("_CatalogSelectors", Model.PagingFilteringContext)
        }
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductsByTagBeforeProductList, additionalData = Model })
        @if (Model.Products.Count > 0)
        {
            <div class="shop-tab-title">@Model.TagName</div>
            <div class="bg-color-white mb-20">
                <div class="row">
                    <div class="@(Model.PagingFilteringContext.ViewMode == "list" ? "product-list" : "product-grid")">
                        <div class="item-grid">
                            @foreach (var product in Model.Products)
                            {<div class="@(Model.PagingFilteringContext.ViewMode == "list" ? "col-md-3 col-sm-3 col-xs-12" : "col-md-4 col-sm-4 col-xs-12")">
                                 <div class="mobile-access-box mobile-access-long ">
                                     <div class="inner-item-paginav-featured">
                                         <div class="item-box">
                                             @await Html.PartialAsync("_ProductBoxCategory", product)
                                         </div>
                                     </div>
                                 </div>
                             </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        }
        @{
            var pager = Html.Pager(Model.PagingFilteringContext).QueryParam("pagenumber");
        }
        @if (!pager.IsEmpty())
        {
            <div class="pager">
                @pager
            </div>
        }
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductsByTagBottom, additionalData = Model })
    </div>
</div>
